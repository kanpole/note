#+TITLE:Elisp简单使用

+ 基本原则

  - [ 1] '()：列表，前面的‘'’表示不要进一步解释该列表，直接输出即可，如果没有‘'’则将第一个原子视为函数来解释
  - [ 2] '用作字面量时，表示不要进一步解释该字面量，直接按照原样输出，否则将会当做变量来解释
  - [ 3] 变量可以绑定到字符串，列表，函数
  - [ 4] 对任意表达式求助的结果是字符串
  - [ 5] nil相当于()空列表，视为假
  - [ 6] ;为注释
  - [ 7] 交互界面函数的返回值不会回显，是可用M-x或者其他快捷键使用的函数
  - [ 8] 函数实体前加上 (interactive arg)使函数成为交互函数
  - [ 9] 如果测试结果的返回值非nil，则使用t代替 


+ 交互函数关键字符

|------+--------------------------------------------------------|
| 字符 | 描述                                                   |
|------+--------------------------------------------------------|
| void | 可以没有任何字符，表示不需要参数                       |
| "/n" | 表示换行，分割参数                                     |
| "p"  | 表示将C-u num，或者M-num解释为一个数字参量传送给函数   |
| "r"  | 将关注的缓冲区的位点的开始值到缓冲区结束的值传送给函数 |
| "B"  | 提升用户输入一个缓冲区名字，后面可跟提示用的字符串     |
|      |                                                        |



+ 基本函数

|------------------+---------------------------------------------------------------+---------------------------------------------------|
| 函数             | 参数                                                          | 用法                                              |
|------------------+---------------------------------------------------------------+---------------------------------------------------|
| concat           | 任意字符串，用空格隔开                                        | 连接值，并返回字符串                              |
| substring        | 1：源字符串；2-3：开始和解释位置                              | 搜索指定开始位置和结束位置的字符                  |
| message          | 一个字符串；或者使用任意多占位符                              | 回显区打印一个字符串消息                          |
| set              | 1：'变量名                                                    | 值，或者列表等                                    |
| setq             | 1：变量名不需要加‘'’；后面大于一个参数                      | 第二个赋给第一个，第四个赋给第三个                |
| buffer-name      | void                                                          | 当前缓冲区的名字                                  |
| buffer-file-name | void                                                          | 当前缓冲区对应的文件                              |
| current-buffer   | void                                                          | 获取当前缓冲区                                    |
| other-buffer     | void                                                          | 获取最近使用的那个缓冲区                          |
| switch-to-buffer | buffer                                                        | 切换到指定缓冲区                                  |
| set-buffer       | buffer                                                        | 将程序的注意力切换到指定缓冲                      |
| buffer-size      | void                                                          | 返回当前缓冲区的大小                              |
| point            | void                                                          | 返回当前缓冲区的位置                              |
| point-mix/max    | void                                                          | 返回当前缓冲区的最小与最大位置                    |
| let              | 符号或者列表，符号默认值为nil，列表默认值为列表中的第二个元素 | 可以安全屏蔽外部同名变量，返回最后一个表达式的值  |
| equal            | 要对比的字符串                                                | 判断两个符号所代表的的内容是否相同                |
| save-excursion   | 任意个表达式                                                  | 保存一些信息，退出函数时恢复；位点，mark,缓冲区等 |
|                  |                                                               |                                                   |


+ 快捷键

|-------------+------------------------------------------|
| 快捷键      | 描述                                     |
|-------------+------------------------------------------|
| C-x C-e     | 执行表达式命令                           |
| C-u C-x C-e | 执行表达式命令，并将结果显示在当前缓冲区 |
|             |                                          |
|             |                                          |
