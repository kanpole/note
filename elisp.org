#+TITLE:Elisp简单使用

+ 基本原则

  - [X] '()：列表，前面的‘'’表示不要进一步解释该列表，直接输出即可，如果没有‘'’则将第一个原子视为函数来解释
  - [X] '用作字面量时，表示不要进一步解释该字面量，直接按照原样输出，否则将会当做变量来解释
  - [X] 变量可以绑定到字符串，列表，函数
  - [X] 对任意表达式求助的结果是字符串
  - [X] nil相当于()空列表，视为假
  - [X] ;为注释
  - [X] 交互界面函数的返回值不会回显，是可用M-x或者其他快捷键使用的函数
  - [X] 函数实体前加上 (interactive arg)使函数成为交互函数
  - [X] 如果测试结果的返回值非nil，则使用t代替
  - [X] &optional arg表示参量使可选的


+ 交互函数关键字符

|------+----------------------------------------------------------|
| 字符 | 描述                                                     |
|------+----------------------------------------------------------|
| void | 可以没有任何字符，表示不需要参数                         |
| "/n" | 表示换行，分割参数                                       |
| "p"  | 对前缀参量进行处理                                       |
| "P"  | 不要对前缀参量进行处理                                   |
| "r"  | 将关注的缓冲区的位点的开始值到缓冲区结束的值传送给函数   |
| "B"  | 一个存在或者不存在的缓冲区或名字，后面可跟提示用的字符串 |
| "b"  | 一个必须存在的缓冲区或名字                               |
| "*"  | 表示不能对只读缓冲进行操作                               |
| "c"  | 表示可以输入一个字符                                     |
| "s"  | 标识可以输入一个字符串                                   |
|------+----------------------------------------------------------|



+ 基本函数

|-------------------------+-----------------------------------------------------------------------+-------------------------------------------------------|
| 函数                    | 参数                                                                  | 用法                                                  |
|-------------------------+-----------------------------------------------------------------------+-------------------------------------------------------|
| concat                  | 任意字符串，用空格隔开                                                | 连接值，并返回字符串                                  |
| substring               | 1：源字符串；2-3：开始和结束位置                                      | 搜索指定开始位置和结束位置的字符                      |
| message                 | 一个字符串；或者使用任意多占位符                                      | 回显区打印一个字符串消息                              |
| set                     | 1：'变量名                                                            | 值，或者列表等                                        |
| setq                    | 1：变量名不需要加‘'’；后面大于一个参数                              | 第二个赋给第一个，第四个赋给第三个                    |
| buffer-name             | void                                                                  | 当前缓冲区的名字                                      |
| buffer-file-name        | void                                                                  | 当前缓冲区对应的文件                                  |
| current-buffer          | void                                                                  | 获取当前缓冲区                                        |
| other-buffer            | void                                                                  | 获取最近使用的那个缓冲区                              |
| switch-to-buffer        | buffer                                                                | 切换到指定缓冲区                                      |
| set-buffer              | buffer                                                                | 将程序的注意力切换到指定缓冲                          |
| buffer-size             | void                                                                  | 返回当前缓冲区的大小                                  |
| point                   | void                                                                  | 返回当前缓冲区的位置                                  |
| point-mix/max           | void                                                                  | 返回当前缓冲区的最小与最大位置                        |
| let                     | 1：符号或者列表，符号默认值为nil，列表默认值为列表中的第二个元素      | 可以安全屏蔽外部同名变量，返回最后一个表达式的值      |
| let*                    | 1：符号或者表达式列表                                                 | 依次对符号进行等号赋值，以及对表达式求值              |
| equal                   | 要对比的字符串                                                        | 判断两个符号所代表的的内容是否相同                    |
| save-excursion          | 任意个表达式                                                          | 保存一些信息，退出函数时恢复；位点，mark,缓冲区等     |
| push-mark()             | 位点,参量可选                                                         | 保存位点到标记环                                      |
| goto-char               | 要跳转到的字符数                                                      | 跳转到指定字符位置                                    |
| get-buffer-create       | buffer                                                                | 获取或者创建一个缓冲区                                |
| get-buffer              | buffer                                                                | 获取一个缓冲区，不存在返回nil                         |
| insert-buffer-substring | oldbuffer start end                                                   | 插入区域的字符串到指定缓冲                            |
| erase-buffer            | void                                                                  | 擦除当前缓冲区                                        |
| bufferp                 | buuffer                                                               | 判断是否是一个缓冲本身                                |
| prefix-numeric-value    | 未加工的前缀参数                                                      | 将参数转换为一个数字                                  |
| save-restriction        | 任意数量表达式                                                        | 保存变窄标记                                          |
| widen                   | void                                                                  | 取消变窄                                              |
| narrow-*-*              | 需要变窄的内容                                                        | 设置变窄，只有此区域可见                              |
| car                     | 一个列表                                                              | 返回一个列表的开头元素,非破坏性                       |
| cdr                     | 一个列表                                                              | 返回列表中除了第一个元素以外的元素组成的列表，同上    |
| cons                    | 1：要加入列表的元素；2：一个列表                                      | 将一个元素加入到列表中                                |
| length                  | 列表                                                                  | 查询列表的长度                                        |
| nthcdr                  | 1:递归次数；2：一个列表                                               | 从列表中递归n次cdr,并返回，非破坏性                   |
| setcar                  | 1:列表；2：元素                                                       | 将列表的第一个元素设为指定元素，破坏性                |
| setcdr                  | 1:列表；2：元素                                                       | 将列表的非首元素设为指定元素，破坏性                  |
| search-forward          | 1:字符串，要查询的字符串；2：查询范围；3：失败时处理；4：重复查询次数 | 查询指定字符串，并移动位点，成功返回t                 |
| char-to-string          | 要转换的字符                                                          | 将字符转换为字符串                                    |
| progn                   | 任意数量表达式                                                        | 依次计算表达式，并将最后一个表达式的结果作为返回值    |
| progn1                  | 任意表达式                                                            | 将第一个表达式的值作为返回值                          |
| copy-region-as-kiill    | 同上                                                                  | 将标记区域拷贝到kill环                                |
| delete-region           | 同上                                                                  | 将标记区域从当前缓冲区删除                            |
| defvar                  | 1：变量名；2：值；3：描述                                             | 只会对没有定义的变量求值，如果描述中有*号表示可以更改 |
| last-command            | 此值使一个变量                                                        | 返回最后一次执行的命令名                              |
| this-command            | 此值使一个变量；命令名                                                | 将当前命令放入命令历史中                              |
| kill-ring               | 此值使一个变量                                                        | kill环                                                |
| kill-ying-yank-pointer  | 此值使一个变量                                                        | kill环指针                                            |
| while                   | 1：条件；2：任意数量表达式                                            | 循环                                                  |
| cond                    | 任意个带判断条件的表达式                                              | 依次执行列表中的表达式，直到遇到非nil的表达式为止     |
| eobp                    | void                                                                  | 如果位点位于缓冲区末尾就返回非nil                     |
| looking-at              | 正则表达式                                                            | 当紧跟在位点之后的文本与正则表达式匹配时返回真        |
| sort                    | 1：一个列表；2：一个谓词('>'，"<")等                                  | 对列表进行排序，谓词表示对比，也就是按怎样的顺序排    |
| directory-files         | 1:一个目录；2：t，是否返回绝对路径；3：正则                           | 返回匹配的文件列表                                    |
| nreverse                | 一个列表                                                              | 讲一个列表反转                                        |
| max                     | 一个数字列，而非列表                                                  | 选出元素中最大的值                                    |
| apply                   | 1：一个函数名，或表达式；2：任意列表参量                              | 将列表拆解为单元素应用到函数                          |
| sit-for                 | 数字参量                                                              | 使当前命令暂停一会，以使屏幕重绘                      |
| add-hok                 | 1:hook的模式；2：安装的函数                                           | 当变换到指定模式时就调用指定函数                      |
| autoload                | 1：函数名；2：文件位置；3：描述；4：是否使交互函数                    | 自动加载                                              |
| global-set-key          | 1：键图；2：命令                                                      | 设置命令的快捷键，全局                                |
| define-key              | 1：模式键图；2：按键；3：命令                                         | 设置模式有关的键图                                    |
|-------------------------+-----------------------------------------------------------------------+-------------------------------------------------------|


+ 快捷键

|-------------+------------------------------------------|
| 快捷键      | 描述                                     |
|-------------+------------------------------------------|
| C-x C-e     | 执行表达式命令                           |
| C-u C-x C-e | 执行表达式命令，并将结果显示在当前缓冲区 |
| C-x n w     | 取消变窄                                 |
| M-：        | 执行一个表达式，并插入到位点             |
| C-\         | 切换emacs输入模式                        |
|-------------+------------------------------------------|


+ 配置文件加载顺序

|--------------+----------------------------------+----------|
| 文件         | 描述(同名定义下面将覆盖上面的)   | 加载顺序 |
|--------------+----------------------------------+----------|
| site-load.el | 在程序目录下，全部用户都有效     |        0 |
| site-load.el | 同上                             |     同上 |
| .emacs       | 用户的默认目录，仅对当前用户有效 |        1 |
| 其他个人配置 | 用户自定义位置                   |        2 |
|--------------+----------------------------------+----------|

+ 启动参数

|------+----------------------------|
| 参数 | 描述                       |
|------+----------------------------|
| -q   | 表示禁止加载.emacs配置文件 |
|------+----------------------------|
