#+TITLE: make的简介



#+TITLE:正文


+ make的目标
  - make的第一个目标会被作为终极目标
  - 以.开头的目标和作为模式规则的目标不会被判定为终极目标
+ 存在依赖，只要存在就不会重新编译，放在常规依赖后面，用“|”分割这两种类型的依赖，当依赖目标同时存在两边时，会应用常规依赖
+ 只能在规则目标或者依赖中以及shell中使用通配符，其他情况下需要借助wildcard的帮助



+ win下的cl编译工具简单用法
  - 若想添加include目录，使用/I直接跟目标名；多个路径需要多次指定；也可以添加INCLUDE环境变量
  - 若想传递搜索路径到link；使用/link选项，此后的所有内容都视为传递给link程序的
  - 添加link的lib包含路径，使用/LIBPATH:目录名;多个路径需要多次指定此选项；也可以添加LIB环境变量
  - 若想指定输出程序的子系统，使用/SUBSYSTEM:子系统；
  - 若想指定输出程序的入口函数，使用/ENTRY:入口函数
  - 若想指定输出的文件名，使用/OUT:文件名


+ cl编译程序的选项
|-------+---------------------------------------------|
| 参数  | 用法                                        |
|-------+---------------------------------------------|
| /c    | 只编译后边的文件 不连接，多个文件用空格隔开 |
| /o    | /Fe:命名生成的可执行文件名                  |
| /link | 传递后面的参数到link程序                    |
|-------+---------------------------------------------|
  -例子:


  #+BEGIN_EXAMPLE
  cl /Fe:one.exe one.c /ID:\include1 /ID:\Include2 /link 
  /LIBPATH:lib1 /LIBPATH:lib2 /SUBSYSTEM:console
  #+BEGIN_END



+ 其他知识点

  - 在命令前加上‘-’表示忽略命令执行的错误

  - 在没有makefile的情况下也可以执行make，但是要指定目标，这是利用make的隐士规则实现的

  - make -f filename标识编译指定文件

  - include filename包含文件

  - include导入的文件如果未找到就到-I或--include-dir参数指定的路径中寻找
  - ‘-’也可用在include等关键词中，表示忽略错误
  - 环境变量MAKEFILES所指定的文件在make程序运行时就开始加载执行，并且会自动放弃错误
  - 环境变量MAKEFILE_LIST为make所有包含的makefile堆栈
  - .VARIABLES此变量无法手动修改，展开后使‘.’之前的所有全局变量，包括空变量和make内嵌变量
  - '-t'表示强制将文件标记为最新，以此来参与编译
  - '-n' 目标  表示只打印目标的编译命令，而不执行


